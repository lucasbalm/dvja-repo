# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Fortify Static Code Analyzer SAST Scan

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  build:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
  sca:
    runs-on: self-hosted
    needs: build
    steps:
    - name: Nexus IQ for GitHub Actions
      uses: sonatype-nexus-community/iq-github-action@1.1.0
      with:
        # Nexus IQ Server URL
        serverUrl: ${{secrets.NEXUS_IQ_SERVER_URL}}
        # Username to connect to IQ Server for policy evaluation
        username: ${{secrets.NEXUS_IQ_SERVER_USER}}
        # Password to connect to IQ Server for policy evaluation
        password: ${{secrets.NEXUS_IQ_SERVER_PASSWORD}}
        # Determines the policy elements (policies, labels, and license threat groups) to associate with this build, and is managed via the Nexus IQ Server.
        applicationId: dvja
        # Controls the stage the policy evaluation will be run against on the Nexus IQ Server.
        stage: build
        # This is the path to a specific application archive file, a directory containing such archives or the ID of a Docker image. For archives, a number of formats are supported, including jar, war, ear, tar, tar.gz, zip and many others.
        target: ./target/
  sast:
    runs-on: self-hosted
    needs: build
    steps:
    - name: Fortify SAST Translate (Sourcecodeanalyzer)
      run: sourceanalyzer -b dvja mvn package
    - name: Fortify SAST Scan (Sourcecodeanalyzer)
      run: sourceanalyzer -b dvja -scan -f results.fpr
    - name: Upload FPR to Fortify SSC
      run: fortifyclient uploadFPR -url ${{secrets.SSC_URL}} -authtoken ${{secrets.SSC_UPLOAD_TOKEN}} -application DVJA  -applicationVersion 1.0 -file results.fpr
  export-results:
    runs-on: self-hosted
    needs: [sast,sca]
    steps:
    - name: Export Results
      uses: fortify/gha-export-vulnerabilities@v1
      with:
        ssc_base_url: "http://fortify-linux:8080"
        ssc_auth_token: ${{secrets.SSC_CI_TOKEN}} 
        ssc_version_id: 6
    # Import Fortify SAST results to GitHub Security Code Scanning
    - name: Import Results
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: ./gh-fortify-sast.sarif
