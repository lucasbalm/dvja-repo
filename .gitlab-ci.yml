# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  DOCKER_HOST: tcp://192.168.0.200:2375/
  DOCKER_DRIVER: overlay2

image: maven:3.8.4-jdk-11
cache:
  paths:
    - .m2/repository

stages:          # List of stages for jobs, and their order of execution
  - commit
  - build
  - test
  - release

sonatype-dependency-sca:
  stage: commit
  image: sonatype/gitlab-nexus-iq-pipeline:latest
  script:
    - /sonatype/evaluate -t source -w -i dvja *.xml
  artifacts:
    name: "policy-eval-$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - dvja-policy-eval-report.html

build:
  stage: build
  image: maven:3.8.4-jdk-11
  script:
    - "mvn clean package"
  cache:
    paths:
    - ./target
  artifacts:
    paths:
      - ./target

sonatype-binary-sca:
  stage: build
  image: sonatype/gitlab-nexus-iq-pipeline:latest
  dependencies:
    - build
  script:
    - /sonatype/evaluate -t build -i dvja ./target/*.war
  artifacts:
    name: "policy-eval-$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - dvja-policy-eval-report.html

fortify-sast-scancentral:
  image: fortifydocker/fortify-ci-tools:latest
  stage: build
  # Update/override variables based on the ScanCentral Client documentation for your project's included tech stack(s). Helpful hints:
  #   ScanCentral Client will download dependencies for maven (-bt mvn) and gradle (-bt gradle).
  #   The current fortify-ci-tools image is Linux only at this time. Msbuild integration is not currently supported.
  #   ScanCentral has additional options that should be set for PHP and Python projects.
  #   For other build tools (-bt none), add your build commands to download necessary dependencies.
  #   ScanCentral documentation is located at https://www.microfocus.com/documentation/fortify-software-security-center/ 
  variables:
    SCANCENTRAL_BUILD_OPTS: "-bt mvn"
    SSC_APP: "DVJA"
    SSC_PV: $CI_COMMIT_REF_NAME

  # Run Fortify ScanCentral Client. SSC_URL and SSC_TOKEN are expected as GitLab CICD Variables in the template (masking recommended).
  script:
    - 'echo client_auth_token=CHANGEME321! > /opt/Fortify/ScanCentral/Core/config/client.properties'
    - 'scancentral -sscurl $SSC_URL -ssctoken $SSC_TOKEN start $SCANCENTRAL_BUILD_OPTS -upload -application $SSC_APP -version 1 -uptoken $SSC_TOKEN -block -f worker.fpr -log worker.log'
  
  allow_failure: true

docker build:
  stage: test
  image: docker/compose:latest
  before_script:
    - docker version
    - docker-compose version
  script:
    - docker-compose down
    - docker-compose build
    - docker-compose up -d
    - docker save -o dvja_app.tar dvja_app
  cache:
    paths:
    - ./dvja_app.tar

sonatype-container-sca:
  stage: test
  image: sonatype/gitlab-nexus-iq-pipeline:latest
  dependencies:
    - docker build
  script:
    - /sonatype/evaluate -t stage-release -i dvja ./dvja_app.tar
  artifacts:
    name: "policy-eval-$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - dvja-policy-eval-report.html

fortify-dast-scancentral:
  variables:
    URL_SCDAST_API: "192.168.0.200:8095"
    CICD_TOKEN: "ddca4e67-dfed-4b83-a6d3-a1112188c588"
  stage: test
  image: mcr.microsoft.com/powershell:latest
  script:
    - pwsh ./fortify-dast.ps1 $URL_SCDAST_API $CICD_TOKEN

release:
  stage: release
  image: docker/compose:latest
  before_script:
    - docker version
    - docker-compose version
  script:
    - docker tag dvja_app dvja_app:1
    - echo "docker push dvja_app:1"

